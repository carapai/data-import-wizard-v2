if (enrollmentMapping[value ?? ""]?.isCustom) {
                    return (
                        <CustomColumn
                            mapping={enrollmentMapping}
                            onTypeUpdate={(e) =>
                                enrollmentMappingApi.update({
                                    attribute: `${value}`,
                                    key: "customType",
                                    value: e?.value,
                                })
                            }
                            onValueChange={(val) =>
                                enrollmentMappingApi.update({
                                    attribute: `${value}`,
                                    key: "value",
                                    value: val,
                                })
                            }
                            value={value ?? ""}
                        />
                    );
                }

                if (enrollmentMapping[value ?? ""]?.isSpecific) {
                    return (
                        <Input
                            value={enrollmentMapping[value ?? ""]?.value}
                            onChange={(e: ChangeEvent<HTMLInputElement>) =>
                                enrollmentMappingApi.update({
                                    attribute: `${value}`,
                                    key: "value",
                                    value: e.target.value,
                                })
                            }
                        />
                    );
                }
                return (
                    <Select<Option, false, GroupBase<Option>>
                        value={metadata.sourceColumns?.find(
                            (val) =>
                                val.value ===
                                enrollmentMapping[value ?? ""]?.value,
                        )}
                        options={metadata.sourceColumns}
                        isClearable
                        size="md"
                        onChange={(e) => {
                            enrollmentMappingApi.updateMany({
                                attribute: value ?? "",
                                update: {
                                    value: e?.value || "",
                                    unique:
                                        enrollmentMapping[value ?? ""]
                                            ?.unique || unique,
                                    valueType,
                                },
                            });
                            if (
                                e &&
                                e.value &&
                                mappedValues.indexOf(e.value) !== -1
                            ) {
                                toast({
                                    title: "Variable reused",
                                    description: `Variable ${e.label} already used`,
                                    status: "warning",
                                    duration: 9000,
                                    isClosable: true,
                                });
                            }
                        }}
                    />
                );